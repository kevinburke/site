asi

This option suppresses warnings about missing semicolons. There is a lot of
FUD about semicolon spread by quite a few people in the community. The
common myths are that semicolons are required all the time (they are not) and
that they are unreliable. JavaScript has rules about semicolons which are
followed by *all* browsers so it is up to you to decide whether you should or
should not use semicolons in your code.

For more information about semicolons in JavaScript read
[An Open Letter to JavaScript Leaders Regarding Semicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)
by Isaac Schlueter and [JavaScript Semicolon Insertion](http://inimino.org/~inimino/blog/javascript_semicolons).

--

boss

This option suppresses warnings about the use of assignments in cases where
comparisons are expected. More often than not, code like `if (a = 10) {}` is a
typo. However, it can be useful in cases like this one:

    for (var i = 0, person; person = people[i]; i++) {}

You can silence this error on a per-use basis by surrounding the assignment
with parenthesis, such as:

    for (var i = 0, person; (person = people[i]); i++) {}

--

debug

This option suppresses warnings about the `debugger` statements in your code.

--

eqnull

This option suppresses warnings about `== null` comparisons. Such comparisons
are often useful when you want to check if a variable is `null` or `undefined`.

--

esnext

This option tells JSHint that your code uses ECMAScript 6 specific syntax.
Note that these features are not finalized yet and not all browsers implement
them.

More info:

* [Draft Specification for ES.next (ECMA-262 Ed. 6)](http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts)

--

evil

This option suppresses warnings about the use of `eval`. The use of `eval` is
discouraged because it can make your code vulnerable to various injection
attacks and it makes it hard for JavaScript interpreter to do certain
optimizations.

--

expr

This option suppresses warnings about the use of expressions where normally you
would expect to see assignments or function calls. Most of the time, such code
is a typo. However, it is not forbidden by the spec and that's why this warning
is optional.

--

funcscope

This option suppresses warnings about declaring variables inside of control
structures while accessing them later from the outside. Even though JavaScript
has only two real scopes—global and function—such practice leads to confusion
among people new to the language and hard-to-debug bugs. This is why, by
default, JSHint warns about variables that are used outside of their intended
scope.

    function test() {
      if (true) {
        var x = 0;
      }

      x += 1; // Default: 'x' used out of scope.
                // No warning when funcscope:true
    }

--

globalstrict

This option suppresses warnings about the use of global strict mode. Global
strict mode can break third-party widgets so it is not recommended.

For more info about strict mode see the `strict` option.

--

iterator

This option suppresses warnings about the `__iterator__` property. This property
is not supported by all browsers so use it carefully.

--

lastsemic

This option suppresses warnings about missing semicolons, but only when the
semicolon is omitted for the last statement in a one-line block:

    var name = (function() { return 'Anton' }());

This is a very niche use case that is useful only when you use automatic
JavaScript code generators.

--

laxbreak

This option suppresses most of the warnings about possibly unsafe line breakings
in your code. It doesn't suppress warnings about comma-first coding style. To
suppress those you have to use `laxcomma` (see below).

--

laxcomma

This option suppresses warnings about comma-first coding style:

    var obj = {
        name: 'Anton'
      , handle: 'valueof'
      , role: 'SW Engineer'
    };

--

loopfunc

This option suppresses warnings about functions inside of loops. Defining
functions inside of loops can lead to bugs such as this one:

    var nums = [];

    for (var i = 0; i < 10; i++) {
      nums[i] = function (j) {
        return i + j;
      };
    }

    nums[0](2); // Prints 12 instead of 2

To fix the code above you need to copy the value of `i`:

    var nums = [];

    for (var i = 0; i < 10; i++) {
      (function (i) {
        nums[i] = function (j) {
            return i + j;
        };
      }(i));
    }

--

moz

This options tells JSHint that your code uses Mozilla JavaScript
extensions. Unless you develop specifically for the Firefox web browser
you don't need this option.

More info:

* [New in JavaScript 1.7](https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7)

--

multistr

This option suppresses warnings about multi-line strings. Multi-line strings
can be dangerous in JavaScript because all hell breaks loose if you accidentally
put a whitespace in between the escape character (`\`) and a new line.

Note that even though this option allows correct multi-line strings, it still
warns about multi-line strings without escape characters or with anything in
between the escape character and a whitespace.

    /*jshint multistr:true */

    var text = "Hello\
    World"; // All good.

    text = "Hello
    World"; // Warning, no escape character.

    text = "Hello\
    World"; // Warning, there is a space after \

--

proto

This option suppresses warnings about the `__proto__` property.

--

scripturl

This option suppresses warnings about the use of script-targeted URLs—such as
`javascript:...`.

--

smarttabs

This option suppresses warnings about mixed tabs and spaces when the latter are
used for alignmnent only. The technique is called
[SmartTabs](http://www.emacswiki.org/emacs/SmartTabs).

--

shadow

This option suppresses warnings about variable shadowing i.e. declaring a
variable that had been already declared somewhere in the outer scope.

--

sub

This option suppresses warnings about using `[]` notation when it can be
expressed in dot notation: `person['name']` vs. `person.name`.

--

supernew

This option suppresses warnings about "weird" constructions like
`new function () { ... }` and `new Object;`. Such constructions are sometimes
used to produce singletons in JavaScript:

    var singleton = new function() {
      var privateVar;

      this.publicMethod  = function () {}
      this.publicMethod2 = function () {}
    };

--

validthis

This option suppresses warnings about possible strict violations when the code
is running in strict mode and you use `this` in a non-constructor function. You
should use this option—in a function scope only—when you are positive that your
use of `this` is valid in the strict mode (for example, if you call your
function using `Function.call`).

**Note:** This option can be used only inside of a function scope. JSHint will fail
with an error if you will try to set this option globally.
